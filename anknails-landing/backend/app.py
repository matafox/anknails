from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from datetime import datetime, timedelta
import pathlib, os, uvicorn

app = FastAPI(title="ANK Studio Backend")

# ================== CONFIG ==================
SECRET_TOKEN = os.getenv("ADMIN_SECRET", "anka12341")

# ‚úÖ –±–∞–∑–∞ –ø–æ–∫–∏ —â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –≥–æ—Ç—É—î–º–æ /data (Railway-friendly)
DATA_DIR = pathlib.Path("/data")
DATA_DIR.mkdir(exist_ok=True)

# ================== CORS ==================
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # —É –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –∫—Ä–∞—â–µ ["https://ankstudio.online"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================
# ü©∑ –ú–û–î–£–õ–¨: –ë–∞–Ω–µ—Ä (–∞–¥–º—ñ–Ω —Ä–µ–¥–∞–≥—É—î, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±–∞—á–∞—Ç—å)
# ============================================================

class Banner(BaseModel):
    title: str
    image_url: str | None = None
    active: bool = True

# –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–Ω–µ—Ä (—Ç–∏–º—á–∞—Å–æ–≤–æ –≤ –ø–∞–º‚Äô—è—Ç—ñ)
current_banner = Banner(
    title="–ó–Ω–∏–∂–∫–∞ 50% –¥–æ 10 –ª–∏—Å—Ç–æ–ø–∞–¥–∞ üéÄ",
    image_url="https://i.imgur.com/yourbanner.png",
    active=True,
)

@app.get("/api/banner")
async def get_banner():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –±–∞–Ω–µ—Ä (–¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)"""
    if not current_banner.active:
        return {"active": False}
    return current_banner

@app.post("/api/banner")
async def update_banner(request: Request):
    """–û–Ω–æ–≤–∏—Ç–∏ –±–∞–Ω–µ—Ä (–¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
    data = await request.json()
    token = data.get("token")

    if token != SECRET_TOKEN:
        raise HTTPException(status_code=403, detail="Access denied")

    global current_banner
    current_banner = Banner(**data["banner"])
    return {"success": True, "banner": current_banner}


# ============================================================
# ü©∑ –ú–û–î–£–õ–¨: –¢–∏–º—á–∞—Å–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏ (—Å—Ç–≤–æ—Ä—é—î –∞–¥–º—ñ–Ω)
# ============================================================

class User(BaseModel):
    id: int
    email: str
    password: str
    expires_at: datetime
    active: bool = True

users_db: list[User] = []
user_counter = 1

@app.post("/api/users/create")
async def create_user(request: Request):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç"""
    data = await request.json()
    token = data.get("token")

    if token != SECRET_TOKEN:
        raise HTTPException(status_code=403, detail="Access denied")

    global user_counter
    email = data["email"]
    password = data.get("password", f"user{user_counter:04d}")
    days = data.get("days", 7)

    expires_at = datetime.utcnow() + timedelta(days=days)
    new_user = User(
        id=user_counter,
        email=email,
        password=password,
        expires_at=expires_at,
    )
    users_db.append(new_user)
    user_counter += 1

    return {"success": True, "user": new_user}


@app.get("/api/users")
async def get_users():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    active_users = [u for u in users_db if u.active]
    return {"users": active_users}


# ============================================================
# ü©∑ HEALTHCHECK / ROOT
# ============================================================

@app.get("/")
def root():
    return {"status": "ok", "msg": "ANK Studio LMS backend is running üíÖ"}


# ============================================================
# ü©∑ MAIN ENTRY (–¥–ª—è Railway)
# ============================================================
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    uvicorn.run("app:app", host="0.0.0.0", port=port, reload=False)
